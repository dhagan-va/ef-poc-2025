name: .NET Build and Test Template

on:
  workflow_call:
    inputs:
      SOLUTION_FILE:
        required: true
        type: string
        description: "Path to the solution file (e.g., 'MySolution.sln')"
      WORKING_DIRECTORY:
        required: false
        type: string
        default: "."
        description: "Working directory for the build (default: root)"
      DOTNET_VERSION:
        required: false
        type: string
        default: "8.x"
        description: "DotNet version to use (default: 8.x)"
      BUILD_CONFIGURATION:
        required: false
        type: string
        default: "Release"
        description: "Build configuration (default: Release)"
      TARGET_FRAMEWORK:
        required: false
        type: string
        default: "net8.0"
        description: "Target framework (default: net8.0)"
      UNIT_TEST_FILTER:
        required: false
        type: string
        default: "TestCategory=UnitTest"
        description: "Unit test filter (default: TestCategory=UnitTest)"
      RUN_SPECFLOW_TESTS:
        required: false
        type: boolean
        default: false
        description: "Whether to run SpecFlow tests (default: false)"
      SPECFLOW_TEST_FILTER:
        required: false
        type: string
        default: "TestCategory=SpecFlow"
        description: "SpecFlow test filter (default: TestCategory=SpecFlow)"
    secrets:
      REGISTRY_USER:
        required: true
        description: "GitHub registry username"
      REGISTRY_TOKEN:
        required: true
        description: "GitHub registry token"

permissions:
  id-token: write
  contents: read
  actions: read
  security-events: write
  checks: write
  pull-requests: write

env:
  NUGET_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    name: Build Solution
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - dotnet-version: ${{ inputs.DOTNET_VERSION }}
            framework: ${{ inputs.TARGET_FRAMEWORK }}

    outputs:
      build-success: ${{ steps.build-status.outputs.success }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clean previous run
      run: |
        rm -rf ${{ github.workspace }}/TestResults
        dotnet nuget locals all --clear

    - name: Set Branch
      id: get_branch
      run: |
        if ${{ github.event_name == 'pull_request' }}
        then
          echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT
        else
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
        fi

    - name: Show Branch name
      run: echo "Building branch:${{ steps.get_branch.outputs.BRANCH_NAME }}"

    - name: Setup dotnet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        dotnet-quality: ga

    - name: Add GitHub as NuGet Source
      run: |
        dotnet nuget add source ${{ env.NUGET_URL }} \
        -n github \
        -u ${{ secrets.REGISTRY_USER }} \
        -p ${{ secrets.REGISTRY_TOKEN }} \
        --store-password-in-clear-text

    - name: Restore dependencies
      run: dotnet restore ${{ inputs.SOLUTION_FILE }}

    - name: Clean project ${{ matrix.dotnet-version }}
      run: dotnet clean ${{ inputs.SOLUTION_FILE }}

    - name: Build ${{ matrix.dotnet-version }}
      run: |
        dotnet build ${{ inputs.SOLUTION_FILE }} \
        --configuration ${{ inputs.BUILD_CONFIGURATION }} \
        --no-restore \
        --property:OutputPath=./bin/${{ inputs.BUILD_CONFIGURATION }}/${{ matrix.framework }}

    - name: Set build status
      id: build-status
      if: success()
      run: echo "success=true" >> $GITHUB_OUTPUT

    - name: Comment PR for failed build
      uses: mshick/add-pr-comment@v2
      if: ${{ github.event_name == 'pull_request' && failure() }}
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        message: "**Build failed for this pull request. Please check the build logs for details.**"
        allow-repeats: false

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.build-success == 'true'
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        include:
          - dotnet-version: ${{ inputs.DOTNET_VERSION }}
            framework: ${{ inputs.TARGET_FRAMEWORK }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set Branch and PR Info
      id: branch_info
      run: |
        if ${{ github.event_name == 'pull_request' }}
        then
          echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT
          echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "test_title=Unit Test Run for PR #${{ github.event.number }} (${{ github.run_number }})" >> $GITHUB_OUTPUT
        else
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          echo "test_title=Unit Test Run ${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi

    - name: Setup dotnet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        dotnet-quality: ga

    - name: Add GitHub as NuGet Source
      run: |
        dotnet nuget add source ${{ env.NUGET_URL }} \
        -n github \
        -u ${{ secrets.REGISTRY_USER }} \
        -p ${{ secrets.REGISTRY_TOKEN }} \
        --store-password-in-clear-text

    - name: Restore and Build for Tests
      run: |
        dotnet restore ${{ inputs.SOLUTION_FILE }}
        dotnet build ${{ inputs.SOLUTION_FILE }} \
        --configuration ${{ inputs.BUILD_CONFIGURATION }} \
        --no-restore \
        --property:OutputPath=./bin/${{ inputs.BUILD_CONFIGURATION }}/${{ matrix.framework }}

    - name: Create unit test solution file
      run: |
        dotnet new sln --name _unittest --force
        find . -name "*Test*.csproj" -not -name "*Spec*" -not -name "*Library*" -exec dotnet sln _unittest.sln add {} \;

    - name: Run Unit Tests ${{ matrix.dotnet-version }}
      run: |
        dotnet test _unittest.sln \
        --no-build \
        --verbosity normal \
        --configuration ${{ inputs.BUILD_CONFIGURATION }} \
        --property:OutputPath=./bin/${{ inputs.BUILD_CONFIGURATION }}/${{ matrix.framework }} \
        --filter "${{ inputs.UNIT_TEST_FILTER }}" \
        --results-directory ${{ github.workspace }}/TestResults/Unit \
        --logger:"trx;" \
        --logger:"html;" \
        --collect:"XPlat Code Coverage"

    - name: Unit Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Unit Tests ${{ matrix.dotnet-version }}
        path: ${{ github.workspace }}/TestResults/Unit/*.trx
        reporter: dotnet-trx
        fail-on-error: 'true'

    - name: Comment PR for failed unit tests
      uses: mshick/add-pr-comment@v2
      if: ${{ github.event_name == 'pull_request' && failure() }}
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        message: "**Pull request fails unit tests. See Test Results in the Actions tab for details.**"
        allow-repeats: false

    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.dotnet-version }}
        path: ${{ github.workspace }}/TestResults/Unit/
        retention-days: 30

  specflow-tests:
    name: Run SpecFlow Tests
    runs-on: ubuntu-latest
    needs: [build, unit-tests]
    if: inputs.RUN_SPECFLOW_TESTS && needs.build.outputs.build-success == 'true'
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          - dotnet-version: ${{ inputs.DOTNET_VERSION }}
            framework: ${{ inputs.TARGET_FRAMEWORK }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set Branch and PR Info
      id: branch_info
      run: |
        if ${{ github.event_name == 'pull_request' }}
        then
          echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT
          echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "test_title=SpecFlow Test Run for PR #${{ github.event.number }} (${{ github.run_number }})" >> $GITHUB_OUTPUT
        else
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          echo "test_title=SpecFlow Test Run ${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi

    - name: Setup dotnet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        dotnet-quality: ga

    - name: Add GitHub as NuGet Source
      run: |
        dotnet nuget add source ${{ env.NUGET_URL }} \
        -n github \
        -u ${{ secrets.REGISTRY_USER }} \
        -p ${{ secrets.REGISTRY_TOKEN }} \
        --store-password-in-clear-text

    - name: Restore and Build for SpecFlow Tests
      run: |
        dotnet restore ${{ inputs.SOLUTION_FILE }}
        dotnet build ${{ inputs.SOLUTION_FILE }} \
        --configuration ${{ inputs.BUILD_CONFIGURATION }} \
        --no-restore \
        --property:OutputPath=./bin/${{ inputs.BUILD_CONFIGURATION }}/${{ matrix.framework }}

    - name: Run SpecFlow Tests ${{ matrix.dotnet-version }}
      run: |
        dotnet test ${{ inputs.SOLUTION_FILE }} \
        --no-build \
        --verbosity normal \
        --configuration ${{ inputs.BUILD_CONFIGURATION }} \
        --property:OutputPath=./bin/${{ inputs.BUILD_CONFIGURATION }}/${{ matrix.framework }} \
        --filter "${{ inputs.SPECFLOW_TEST_FILTER }}" \
        --results-directory ${{ github.workspace }}/TestResults/SpecFlow \
        --logger:"trx;" \
        --logger:"html;" \
        --collect:"XPlat Code Coverage"

    - name: SpecFlow Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: SpecFlow Tests ${{ matrix.dotnet-version }}
        path: ${{ github.workspace }}/TestResults/SpecFlow/*.trx
        reporter: dotnet-trx
        fail-on-error: 'true'

    - name: Comment PR for failed SpecFlow tests
      uses: mshick/add-pr-comment@v2
      if: ${{ github.event_name == 'pull_request' && failure() }}
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        message: "**Pull request fails SpecFlow tests. See Test Results in the Actions tab for details.**"
        allow-repeats: false

    - name: Upload SpecFlow Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: specflow-test-results-${{ matrix.dotnet-version }}
        path: ${{ github.workspace }}/TestResults/SpecFlow/
        retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [build, unit-tests, specflow-tests]
    if: always()
    steps:
      - name: Create Test Summary
        run: |
          echo "## .NET Build and Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.RUN_SPECFLOW_TESTS }}" = "true" ]; then
            echo "| SpecFlow Tests | ${{ needs.specflow-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Solution File:** \`${{ inputs.SOLUTION_FILE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Working Directory:** \`${{ inputs.WORKING_DIRECTORY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**DotNet Version:** \`${{ inputs.DOTNET_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build Configuration:** \`${{ inputs.BUILD_CONFIGURATION }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Post comprehensive PR status comment
        uses: mshick/add-pr-comment@v2
        if: ${{ github.event_name == 'pull_request' }}
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ## .NET Build and Test Summary
            
            | Job | Status |
            |-----|--------|
            | **Build** | ${{ needs.build.result }} |
            | **Unit Tests** | ${{ needs.unit-tests.result }} |
            ${{ inputs.RUN_SPECFLOW_TESTS && format('| **SpecFlow Tests** | {0} |', needs.specflow-tests.result) || '' }}
            
            **Solution:** `${{ inputs.SOLUTION_FILE }}`
            **Configuration:** `${{ inputs.BUILD_CONFIGURATION }}`
            **DotNet Version:** `${{ inputs.DOTNET_VERSION }}`
            
            ${{ (needs.build.result == 'failure' || needs.unit-tests.result == 'failure' || (inputs.RUN_SPECFLOW_TESTS && needs.specflow-tests.result == 'failure')) && '❌ **Some tests failed. Please check the details in the Actions tab.**' || '✅ **All tests passed successfully!**' }}